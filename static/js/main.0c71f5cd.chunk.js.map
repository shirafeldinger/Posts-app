{"version":3,"sources":["Component/Post.js","Component/AddPostForm.js","App.js","serviceWorker.js","index.js"],"names":["Post","postId","this","props","index","className","id","title","info","type","onClick","onRemovePost","Component","AddPostForm","state","onChange","e","setState","target","value","placeholder","onAddPost","App","posts","addInfo","handleAddPost","copyArrPosts","push","setTimeout","handleRemovePost","i","tempPosts","filter","element","prevProps","prevState","prevPostsCount","length","currentPostsCount","addedPostIndex","addedPost","document","querySelector","scrollIntoView","map","post","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAGqBA,G,mLACT,IAAD,OACDC,EAAS,QAAUC,KAAKC,MAAMC,MAEpC,OACE,yBAAKC,UAAU,OAAOC,GAAIL,GACxB,sCAAYC,KAAKC,MAAMI,OACvB,wBAAIF,UAAU,QAAd,SAA4BH,KAAKC,MAAMK,MACvC,4BACEC,KAAK,SACLJ,UAAU,iBACVK,QAAS,kBAAM,EAAKP,MAAMQ,aAAa,EAAKR,MAAMC,SAHpD,e,GAR0BQ,cCAbC,G,wDACnB,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAEDW,MAAQ,CACXP,MAAO,GACPC,KAAM,IALS,E,qDAST,IAAD,OACP,OACE,yBAAKH,UAAU,WACb,2BACEA,UAAU,eACVU,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEV,MAAOS,EAAEE,OAAOC,SACjDA,MAAOjB,KAAKY,MAAMP,MAClBE,KAAK,OACLW,YAAY,UAEd,2BACEf,UAAU,eACVI,KAAK,OACLW,YAAY,OACZL,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAET,KAAMQ,EAAEE,OAAOC,SAChDA,MAAOjB,KAAKY,MAAMN,OAEpB,4BACEH,UAAU,uBACVK,QAAS,WACP,EAAKP,MAAMkB,UAAU,EAAKP,MAAMP,MAAO,EAAKO,MAAMN,MAClD,EAAKS,SAAS,CAAEV,MAAO,GAAIC,KAAM,OAJrC,Y,GA3BiCI,cC8E1BU,G,kNAxEbR,MAAQ,CACNS,MAAO,CACL,CAAEhB,MAAO,yBAA0BC,KAAM,sBACzC,CACED,MAAO,yBACPC,KAAM,iCAER,CACED,MAAO,kCACPC,KAAM,+BAGVgB,QAAS,I,EAcXC,cAAgB,SAACjB,EAAMD,GACrB,IAAImB,EAAY,YAAO,EAAKZ,MAAMS,OAEpB,KAAVhB,GAAyB,KAATC,IAIpBkB,EAAaC,KAAK,CAAEpB,QAAOC,SAE3B,EAAKS,SAAS,CAAEM,MAAOG,EAAcF,QAtCzB,oBAuCZI,YAAW,kBAAM,EAAKX,SAAS,CAAEO,QAAS,OAAO,Q,EAGnDK,iBAAmB,SAACC,GAClB,IAAIC,EAAY,EAAKjB,MAAMS,MAAMS,QAAO,SAACC,EAAS7B,GAAV,OAAoBA,IAAU0B,KAEtE,EAAKb,SAAS,CAAEM,MAAOQ,K,iEA3BNG,EAAWC,GAC5B,IAAMC,EAAiBD,EAAUZ,MAAMc,OACjCC,EAAoBpC,KAAKY,MAAMS,MAAMc,OAE3C,GAAID,EAAiBE,EAAmB,CACtC,IAAMC,EAAiBD,EAAoB,EACrCE,EAAYC,SAASC,cAAc,SAAWH,GACpDX,YAAW,kBAAMY,EAAUG,mBAAkB,Q,+BAuBvC,IAAD,OACP,OACE,yBAAKtC,UAAU,OACb,wBAAIC,GAAG,YAAP,SACA,kBAAC,EAAD,CAAce,UAAWnB,KAAKuB,gBAC9B,4BACE,0BAAMpB,UAAU,kCACbH,KAAKY,MAAMU,UAIftB,KAAKY,MAAMS,MAAMqB,KAAI,SAACC,EAAMf,GAC3B,OACE,kBAAC,EAAD,CACEgB,IAAKhB,EACL1B,MAAO0B,EACPvB,MAAOsC,EAAKtC,MACZC,KAAMqC,EAAKrC,KACXG,aAAc,EAAKkB,2B,GAhEfjB,cCIEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASc,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c71f5cd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Post.css\";\r\n\r\nexport default class Post extends Component {\r\n  render() {\r\n    const postId = \"post-\" + this.props.index;\r\n\r\n    return (\r\n      <div className=\"card\" id={postId}>\r\n        <h3>Title: {this.props.title}</h3>\r\n        <h4 className=\"info\">Info: {this.props.info}</h4>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger\"\r\n          onClick={() => this.props.onRemovePost(this.props.index)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./AddPost.css\";\r\n\r\nexport default class AddPostForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      title: \"\",\r\n      info: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Addpost\">\r\n        <input\r\n          className=\"form-control\"\r\n          onChange={(e) => this.setState({ title: e.target.value })}\r\n          value={this.state.title}\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n        />\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          placeholder=\"Info\"\r\n          onChange={(e) => this.setState({ info: e.target.value })}\r\n          value={this.state.info}\r\n        />\r\n        <button\r\n          className=\" btn btn-primary m-2\"\r\n          onClick={() => {\r\n            this.props.onAddPost(this.state.title, this.state.info);\r\n            this.setState({ title: \"\", info: \"\" });\r\n          }}\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Post from \"./Component/Post.js\";\nimport AddPostsForm from \"./Component/AddPostForm\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst message = \"post was added!\";\n\nclass App extends Component {\n  state = {\n    posts: [\n      { title: \"Learning to code react\", info: \"it's my first time\" },\n      {\n        title: \"I am coding in my room\",\n        info: \"my dog is sleeping next to me\",\n      },\n      {\n        title: \"Corona virus is still in israel\",\n        info: \" the second wave is coming\",\n      },\n    ],\n    addInfo: \"\",\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevPostsCount = prevState.posts.length;\n    const currentPostsCount = this.state.posts.length;\n\n    if (prevPostsCount < currentPostsCount) {\n      const addedPostIndex = currentPostsCount - 1;\n      const addedPost = document.querySelector(\"#post-\" + addedPostIndex);\n      setTimeout(() => addedPost.scrollIntoView(), 900);\n    }\n  }\n\n  handleAddPost = (info, title) => {\n    let copyArrPosts = [...this.state.posts];\n\n    if (title === \"\" || info === \"\") {\n      return;\n    }\n\n    copyArrPosts.push({ title, info });\n\n    this.setState({ posts: copyArrPosts, addInfo: message });\n    setTimeout(() => this.setState({ addInfo: \"\" }), 2500);\n  };\n\n  handleRemovePost = (i) => {\n    let tempPosts = this.state.posts.filter((element, index) => index !== i);\n\n    this.setState({ posts: tempPosts });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 id=\"headline\">Posts</h1>\n        <AddPostsForm onAddPost={this.handleAddPost} />\n        <h3>\n          <span className=\"badge badge-pill badge-success\">\n            {this.state.addInfo}\n          </span>\n        </h3>\n\n        {this.state.posts.map((post, i) => {\n          return (\n            <Post\n              key={i}\n              index={i}\n              title={post.title}\n              info={post.info}\n              onRemovePost={this.handleRemovePost}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}